# GitHub Actions Workflow for CI/CD with Java 21 and Docker
name: Java CI/CD with Maven and Docker

# This workflow triggers on every push to the main branch
on:
  push:
    branches: [ "main" ]

jobs:
  # ==================================
  #  CI STAGE: Build, Test, and Push
  # ==================================
  build-and-push:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # 1. Checks out your repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Set up JDK 21 for the build process
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # 3. Build with Maven
    # This command compiles the code, runs tests, and packages the app into a .jar file
    - name: Build with Maven
      # The working-directory tells the command to run inside your project's subfolder
      working-directory: ./demo.reach  # <-- UPDATE THIS LINE
      run: mvn -B package --file pom.xml

    # 4. Log in to Docker Hub
    # Uses secrets to securely log in without exposing credentials in the code
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 5. Build and push the Docker image
    # This step uses the Dockerfile in your repository to build the image
    # and pushes it to your Docker Hub account.
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        # The context now points to the subdirectory where the Dockerfile and target folder are
        context: ./your-project-subdirectory # <-- UPDATE THIS LINE
        push: true
        # The tag for the image, e.g., your-username/medical-register:latest
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/medical-register:latest

  # ======================================
  #  CD STAGE: Deploy to AWS EC2
  # ======================================
  deploy:
    name: Deploy to AWS EC2
    # This job depends on the 'build-and-push' job completing successfully
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    # 1. Configure AWS credentials
    # Uses an official AWS action to configure credentials for the AWS CLI
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 2. Deploy to EC2
    # This step uses SSH to connect to your EC2 instance and run deployment commands.
    # It assumes Docker is already installed on the EC2 instance.
    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Log in to Docker Hub on the EC2 instance
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          
          # Pull the latest image from Docker Hub
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/medical-register:latest
          
          # Stop the existing container if it's running
          docker stop medical-register-container || true
          
          # Remove the old container
          docker rm medical-register-container || true
          
          # Run the new container from the updated image
          # Maps port 8080 on the EC2 instance to port 8080 in the container
          docker run -d --name medical-register-container -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/medical-register:latest
